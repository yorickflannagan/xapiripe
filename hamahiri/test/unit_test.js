'use strict';

const Hamahiri = require('../lib/hamahiri.js');
const assert = require('assert');
const process = require('process');
const crypto = require('crypto');
const asn1js = require('asn1js');
const path = require('path');
const fs = require('fs');

const LOG = process.stdout;
const LEGACY_PROVIDER = 'Microsoft Enhanced RSA and AES Cryptographic Provider';
const CNG_PROVIDER = "Microsoft Software Key Storage Provider";
let indexCN = 0;

class EnrollTest
{
	constructor()
	{
		this.__tests = 0;
		this.__legacyKeyPair = null;
		this.__cngKeyPair = null;

		this.__csr = null;
		this.__pkcs7 = null;

		LOG.write('Testing certificate enrollment initialization...');
		this.__enroll = new Hamahiri.Enroll();
		assert(this.__enroll, 'Failure on Hamahiri.Enroll initialization');
		LOG.write(' done!\n');
		this.__tests++;
	}
	checkEnumDevices() {
		LOG.write('Testing cryptographic devices enumeration...');
		assert(this.__enroll.enumerateDevices, 'The expected Enroll.enumerateDevices() method is undefined');
		const devices = this.__enroll.enumerateDevices();
		let found = devices.find((value) => { return value ===  LEGACY_PROVIDER; });
		assert(found, 'The minimum required legacy provider is not present');

		LOG.write(' done!\n');
		console.log('Installed providers:');
		console.log(devices);
		this.__tests++;
	}
	checkLegacyGenKeyPair() {
		LOG.write('Testing legacy RSA key pair generation...');
		assert(this.__enroll.generateKeyPair, 'The expected Enroll.generateKeyPair() method is undefined');
		this.__legacyKeyPair = this.__enroll.generateKeyPair(LEGACY_PROVIDER, 2048);
		assert(this.__legacyKeyPair, 'Failed to generate key pair');
		assert(this.__legacyKeyPair.privKey && this.__legacyKeyPair.pubKey, 'The required members of KeyPair object are not defined');
		assert.equal(isNaN(this.__legacyKeyPair.privKey), false, 'privKey member of KeyPair object must be a number');
		assert(this.__legacyKeyPair.privKey > 0, 'privKey member of KeyPair object must be positive number');
		assert(this.__legacyKeyPair.pubKey instanceof Uint8Array, 'pubKey member of KeyPair object must be an instance of Uint8Array');
		this.__tests++;
		LOG.write(' done!\n');
	}
	checkCNGGenKeyPair() {
		LOG.write('Testing CNG RSA key pair generation...');
		assert(this.__enroll.generateKeyPair, 'The expected Enroll.generateKeyPair() method is undefined');
		this.__cngKeyPair = this.__enroll.generateKeyPair(CNG_PROVIDER, 2048);
		assert(this.__cngKeyPair, 'Failed to generate key pair');
		assert(this.__cngKeyPair.privKey && this.__cngKeyPair.pubKey, 'The required members of KeyPair object are not defined');
		assert.equal(isNaN(this.__cngKeyPair.privKey), false, 'privKey member of KeyPair object must be a number');
		assert(this.__cngKeyPair.privKey > 0, 'privKey member of KeyPair object must be positive number');
		assert(this.__cngKeyPair.pubKey instanceof Uint8Array, 'pubKey member of KeyPair object must be an instance of Uint8Array');
		this.__tests++;
		LOG.write(' done!\n');
	}
	#makeCertificationRequestInfo(rawPubKey, cn) {
		let ver = new asn1js.Integer({ value: 1 });
		let name = new asn1js.Sequence({ value: [
			new asn1js.Set({ value: [
				new asn1js.Sequence({ value: [
					new asn1js.ObjectIdentifier({ value: '2.5.4.6'}),
					new asn1js.PrintableString({ value: 'BR' })
				]})
			]}),
			new asn1js.Set({ value: [
				new asn1js.Sequence({ value: [
					new asn1js.ObjectIdentifier({ value: '2.5.4.10'}),
					new asn1js.PrintableString({ value: 'PKI Brazil' })
				]})
			]}),
			new asn1js.Set({ value: [
				new asn1js.Sequence({ value: [
					new asn1js.ObjectIdentifier({ value: '2.5.4.11'}),
					new asn1js.PrintableString({ value: 'Common Name for All Cats End User CA' })
				]})
			]}),
			new asn1js.Set({ value: [
				new asn1js.Sequence({ value: [
					new asn1js.ObjectIdentifier({ value: '2.5.4.3'}),
					new asn1js.PrintableString({ value: cn })
				]})
			]})
		]});
		let decoded = asn1js.fromBER(rawPubKey.buffer);
		if (decoded.offset === (-1)) throw 'Invalid public keu info';
		let pubKeyInfo = decoded.result;
		let attrs = new asn1js.Constructed({ idBlock: { tagClass: 3, tagNumber: 0 }});
		return new asn1js.Sequence({ value: [ ver, name, pubKeyInfo, attrs ]});
	}
	#makeCertificationRequest(certificateRequestInfo, signed) {
		let request = new asn1js.Sequence({ value: [
			certificateRequestInfo,
			new asn1js.Sequence({ value: [
				new asn1js.ObjectIdentifier({ value: '1.2.840.113549.1.1.11' }),
				new asn1js.Null()
			] }),
			new asn1js.BitString({ value: signed.buffer })
		] });
		return request.toBER(false);
	}
	checkSignLegacyRequest() {
		LOG.write('Testing a certificate request signature with a legacy key...');
		let cn = 'Unit test user certificate common name number ' + ++indexCN;
		let certificateRequestInfo = this.#makeCertificationRequestInfo(this.__legacyKeyPair.pubKey, cn);
		let toBeSigned = certificateRequestInfo.toBER(false);
		let hash = crypto.createHash('sha256');
		hash.update(toBeSigned);
		assert(this.__enroll.sign, 'The expected Enroll.sign() method is undefined');
		let signed = this.__enroll.sign(hash.digest(), Hamahiri.SignMechanism.CKM_SHA256_RSA_PKCS, this.__legacyKeyPair.privKey);
		assert(signed, 'Signature failure');
		assert(signed instanceof Uint8Array, 'The signed buffer must be an instance of Uint8Array');
		this.__csr = this.#makeCertificationRequest(certificateRequestInfo, signed);
		this.__tests++;
		LOG.write(' done!\n');
	}
	#signRequest(csr) {
		// TODO: Sign request with OpenSSL PKI
		return new TextEncoder().encode('Pretend this is a pkcs #7');
	}
	#getSignerCertificate(pkcs7) {
		// TODO: parse with PKI.js
		return new TextEncoder().encode('Pretend this is a signer certificate');
	}
	#getCAChain(pkcs7) {
		// TODO: parse with PKI.js
		let ret = new Array();
		ret.push(new TextEncoder().encode('Pretend this is an end user CA certificate'));
		ret.push(new TextEncoder().encode('Pretend this is an intermediate CA certificate'));
		ret.push(new TextEncoder().encode('Pretend this is a root CA certificate'));
		return ret;
	}
	checkInstallCert() {
		LOG.write('Testing install user certificate...');
		this.__pkcs7 = this.#signRequest(this.__csr);
		let userCert = this.#getSignerCertificate(this.__pkcs7);
		assert(this.__enroll.installCertificate, 'The expected Enroll.installCertificate() method is undefined');
		assert(this.__enroll.installCertificate(userCert), 'Failure on install user certificate');
		this.__tests++;
		LOG.write(' done!\n');
	}
	checkInstallChain() {
		LOG.write('Testing install CA certificates chain...');
		assert(this.__pkcs7, 'This test requires that checkInstallCert test succeeds');
		let chain = this.#getCAChain(this.__pkcs7);

		assert(this.__enroll.installChain, 'The expected Enroll.installChain() method is undefined');
		let done = this.__enroll.installChain(chain);
		let msg = done ? ' done!' : ' Chain already installed.';
		this.__tests++;
		LOG.write(msg);
		LOG.write('\n');
	}
	checkDeleteLegacyKey() {
		LOG.write('Testing legacy RSA key pair removal...');
		assert(this.__legacyKeyPair, 'This test requires that checkLegacyGenKeyPair test succeeds');
		assert(this.__enroll.deleteKeyPair, 'The expected Enroll.deleteKeyPair() method is undefined');
		assert(this.__enroll.deleteKeyPair(this.__legacyKeyPair.privKey), 'Failed to remove RSA key pair');
		this.__tests++;
		LOG.write(' done!\n');
	}
	checkDeleteCNGKey() {
		LOG.write('Testing Windows CNG RSA key pair removal...');
		assert(this.__cngKeyPair, 'This test requires that checkCNGGenKeyPair test succeeds');
		assert(this.__enroll.deleteKeyPair, 'The expected Enroll.deleteKeyPair() method is undefined');
		assert(this.__enroll.deleteKeyPair(this.__cngKeyPair.privKey), 'Failed to remove RSA key pair');
		this.__tests++;
		LOG.write(' done!\n');
	}
	static test() {
		LOG.write('Tests battery of certificate enrollment:\n');
		let test = new EnrollTest();
		test.checkEnumDevices();
		test.checkLegacyGenKeyPair();
		test.checkCNGGenKeyPair();
		test.checkSignLegacyRequest();
		test.checkInstallCert();
		test.checkInstallChain();
		test.checkDeleteLegacyKey();
		test.checkDeleteCNGKey();
		LOG.write(test.__tests.toString());
		LOG.write(' test cases performed.\n')
	}
}

class SignTest
{
	constructor() {
		this.__tests = 0;
		this.__certificates = null;
		this.__signature = null;

		LOG.write('Testing digital signature initialization...');
		this.__sign = new Hamahiri.Sign();
		assert(this.__sign, 'Failure on Hamahiri.Sign initialization');
		LOG.write(' done!\n');
		this.__tests++;
	}
	checkEnumCerts() {
		LOG.write('Testing signing certificates enumeration...');
		assert(this.__sign.enumerateCertificates, 'The expected Sign.enumerateCertificates() method is undefined');
		let certs = this.__sign.enumerateCertificates();
		assert(certs, 'Signing certificates enumeration failed');
		assert(Array.isArray(certs), 'Sign.enumerateCertificates() must return an array of Xapiripe.Certificate');
		assert(certs.length > 0, 'There are no signing certificates installed. Cannot proceed with test.');
		certs.forEach(value => {
			assert(value.subject && value.issuer && value.serial && value.handle, 'Sign.enumerateCertificates() must return an array of Xapiripe.Certificate objects');
			assert(!isNaN(value.handle && value.handle > 0), 'Certificate.handle member must be a positive integer');
		});
		this.__certificates = certs;
		LOG.write(' done!\n');
		console.log('Installed signing certificates:')
		console.log(certs);
		this.__tests++;
	}
	checkSign() {
		LOG.write('Testing signing with sha256WithRSAEncryption algorithm...');
		assert(this.__certificates, 'This test requires that checkEnumCerts test case succeeds');
		assert(this.__sign.sign, 'The expected Sign.sign() method is undefined');
		let hash = crypto.createHash('sha256');
		hash.update('Transaction to sign');
		let signature = this.__sign.sign(hash.digest(), Hamahiri.SignMechanism.CKM_SHA256_RSA_PKCS, this.__certificates[0].handle);
		assert(signature, 'Failure on sign transaction hash');
		assert(signature instanceof Uint8Array, 'Signature must be an instance of Uint8Array');
		this.__signature = signature;
		LOG.write(' done!\n');
		this.__tests++;
	}
	checkSignature() {
		LOG.write('Validating Hamahiri signature against OpenSSL...');
		assert(this.__signature, 'This test requires that checkSign test case succeeds');
		// TODO: Check signature using OpenSSL (see openssl dgst -verify)
		LOG.write(' done!\n');
		this.__tests++;
	}
	checkReleaseKey() {
		LOG.write('Testing release certificate handle...');
		assert(this.__signature, 'This test requires that checkSignature test cases succeeds');
		assert(this.__sign.releaseKeyHandle, 'The expected Sign.releaseKeyHandle() method is undefined');
		this.__certificates.forEach(value => {
			assert(this.__sign.releaseKeyHandle(value.handle), 'Failure on release certificcates handle');
		});
		
		this.__keyPair = null;
		this.__tests++;
		LOG.write(' done!\n');
	}
	static test() {
		LOG.write('Tests battery of digital signature:\n');
		let test = new SignTest();
		test.checkEnumCerts();
		test.checkSign();
		test.checkSignature();
		test.checkReleaseKey();
		LOG.write(test.__tests.toString());
		LOG.write(' test cases performed.\n')
	}
}

let dir = path.dirname(process.argv[1]);
let indexFile = path.join(dir, 'index.txt');
if (fs.existsSync(indexFile)) indexCN = fs.readFileSync(indexFile)
else fs.writeFileSync(indexFile, indexCN.toString());
EnrollTest.test();
SignTest.test();
fs.writeFileSync(indexFile, indexCN.toString());

/*
const rawPubKey = [ 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xbc, 0xa7, 0x83, 0x17, 0x57, 0x83, 0x19, 0x6c, 0xe1, 0x29, 0x39, 0x8f, 0x59, 0x24, 0xa0, 0x7, 0x59, 0xda, 0x5f, 0x45, 0x99, 0x68, 0x48, 0x2d, 0xa7, 0x26, 0xac, 0x39, 0xf6, 0x57, 0x66, 0x95, 0x5b, 0x3d, 0x2e, 0x80, 0xeb, 0x4a, 0xcd, 0x9d, 0xe, 0x74, 0x35, 0xef, 0xb8, 0x89, 0x90, 0x83, 0xff, 0xbc, 0x39, 0x42, 0xa, 0x4e, 0x38, 0xa3, 0x1d, 0x36, 0xfb, 0x1c, 0xf3, 0x9a, 0xac, 0xc8, 0x15, 0x76, 0xf, 0x82, 0x4c, 0xe0, 0x7f, 0xc1, 0x8e, 0xe8, 0x54, 0xea, 0x7b, 0x23, 0x34, 0xd9, 0x5a, 0x1f, 0x78, 0x12, 0x60, 0xe3, 0xff, 0xa3, 0x57, 0x7f, 0x79, 0x64, 0x9, 0x3d, 0x0, 0x6, 0x4d, 0x1a, 0x88, 0xab, 0x5c, 0xfa, 0x71, 0xd2, 0x74, 0xa8, 0x5, 0xee, 0x96, 0xaf, 0xc, 0xf1, 0x4b, 0x51, 0xf6, 0x3f, 0x50, 0xe, 0x78, 0x20, 0xc0, 0x56, 0x61, 0xf4, 0xcf, 0x91, 0xb8, 0x5, 0x44, 0x64, 0xa6, 0x95, 0xeb, 0x57, 0x63, 0x29, 0xdd, 0x93, 0xf5, 0xdc, 0xa9, 0xcc, 0x57, 0xc7, 0xe6, 0x41, 0x44, 0x17, 0x7f, 0x97, 0xdf, 0x64, 0x64, 0xa0, 0xf, 0xfa, 0xe1, 0x81, 0x9c, 0xa3, 0x52, 0xd0, 0xf2, 0x1d, 0x8e, 0x75, 0x7b, 0x36, 0x6e, 0x47, 0x54, 0x22, 0xb, 0x80, 0x48, 0x3e, 0x61, 0x68, 0x1c, 0x78, 0x60, 0xd0, 0x5c, 0x31, 0x26, 0xcc, 0xf9, 0x5, 0xd5, 0xbf, 0x84, 0x17, 0xea, 0x6, 0x5f, 0x13, 0xb, 0x22, 0xe2, 0xf7, 0xbf, 0x98, 0x3d, 0xf8, 0x71, 0x6c, 0xe3, 0xd8, 0x3, 0xd4, 0x16, 0x3a, 0x8a, 0x92, 0x45, 0xc2, 0x31, 0x4f, 0x7c, 0x7e, 0x48, 0x45, 0xf6, 0x2f, 0x51, 0x97, 0xed, 0x60, 0x68, 0xb1, 0xf6, 0x30, 0x34, 0x98, 0xe2, 0xbd, 0x32, 0xb3, 0xf7, 0x37, 0xbc, 0x48, 0x49, 0x80, 0x6d, 0x54, 0x8b, 0xf9, 0x95, 0xec, 0x11, 0xfa, 0x0, 0x4b, 0xce, 0xbd, 0x2, 0x3, 0x1, 0x0, 0x1 ];
function makeCertificationRequestInfo(rawPubKey) {
	let ver = new asn1js.Integer({ value: 1 });
	let name = new asn1js.Sequence({ value: [
		new asn1js.Set({ value: [
			new asn1js.Sequence({ value: [
				new asn1js.ObjectIdentifier({ value: '2.5.4.6'}),
				new asn1js.PrintableString({ value: 'BR' })
			]})
		]}),
		new asn1js.Set({ value: [
			new asn1js.Sequence({ value: [
				new asn1js.ObjectIdentifier({ value: '2.5.4.10'}),
				new asn1js.PrintableString({ value: 'PKI Brazil' })
			]})
		]}),
		new asn1js.Set({ value: [
			new asn1js.Sequence({ value: [
				new asn1js.ObjectIdentifier({ value: '2.5.4.11'}),
				new asn1js.PrintableString({ value: 'Common Name for All Cats End User CA' })
			]})
		]}),
		new asn1js.Set({ value: [
			new asn1js.Sequence({ value: [
				new asn1js.ObjectIdentifier({ value: '2.5.4.3'}),
				new asn1js.PrintableString({ value: 'Unit test certificate user' })
			]})
		]})
	]});
	let decoded = asn1js.fromBER(rawPubKey.buffer);
	if (decoded.offset === (-1)) throw 'Invalid public keu info';
	let pubKeyInfo = decoded.result;
	let attrs = new asn1js.Constructed({ idBlock: { tagClass: 3, tagNumber: 0 }});
	let requestInfo = new asn1js.Sequence({ value: [ ver, name, pubKeyInfo, attrs ]});
	return requestInfo.toBER(false);
}

const raw = [ 0x30, 0x82, 0x3, 0x3f, 0x30, 0x82, 0x2, 0x27, 0x2, 0x1, 0x0, 0x30, 0x43, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x42, 0x52, 0x31, 0x13, 0x30, 0x11, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13, 0xa, 0x50, 0x4b, 0x49, 0x20, 0x42, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x31, 0x1f, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x4, 0xb, 0x13, 0x16, 0x50, 0x4b, 0x49, 0x20, 0x52, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x43, 0x61, 0x74, 0x73, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xea, 0x9b, 0xd1, 0xaf, 0x9c, 0x6, 0x88, 0x11, 0xa, 0xdd, 0x84, 0x11, 0x27, 0x23, 0xc3, 0x1e, 0x70, 0x7a, 0xd0, 0xd, 0x1a, 0x1a, 0xc0, 0xcc, 0x3b, 0xea, 0xb4, 0xf6, 0x95, 0x64, 0x61, 0x23, 0x8a, 0x8e, 0xec, 0xc9, 0x87, 0x47, 0x53, 0x5e, 0xb6, 0x43, 0x2, 0x91, 0x17, 0x35, 0x3e, 0x7b, 0x39, 0xb5, 0xc3, 0x3, 0x3a, 0x95, 0x23, 0x80, 0xa5, 0xa, 0x19, 0xbe, 0x40, 0x13, 0xc4, 0xd, 0x22, 0xc, 0xf1, 0x96, 0x5b, 0xd1, 0x9a, 0x21, 0xe5, 0x27, 0xe0, 0x1c, 0x52, 0xf9, 0xc0, 0xe4, 0x27, 0x2e, 0x3b, 0x6b, 0x7a, 0x15, 0x48, 0x6e, 0x43, 0x5c, 0xc0, 0xc2, 0x3d, 0x3d, 0x4f, 0x59, 0x81, 0x57, 0x8a, 0xfe, 0xfe, 0xf6, 0xa5, 0x11, 0xda, 0x78, 0x5, 0x2, 0x3, 0x4f, 0x92, 0xb0, 0x2f, 0x3c, 0x5b, 0x8e, 0x3, 0x42, 0x40, 0x23, 0x62, 0x63, 0xe6, 0x84, 0xb6, 0xc7, 0xf1, 0x47, 0xd4, 0x9, 0x93, 0xbb, 0x35, 0x7e, 0x46, 0xaf, 0x4b, 0xd0, 0xaa, 0x8f, 0x8b, 0xff, 0xdb, 0x4, 0x45, 0x60, 0xf8, 0xd2, 0x49, 0xc9, 0x5f, 0x97, 0x30, 0x9e, 0x40, 0x30, 0xee, 0x6f, 0xbc, 0xdb, 0x15, 0x11, 0x22, 0xd5, 0x7d, 0x6e, 0xe7, 0xc5, 0x85, 0x66, 0xe0, 0x65, 0xb2, 0x67, 0xa6, 0x5, 0x7, 0x84, 0x6a, 0x2d, 0x5, 0x34, 0xb2, 0x72, 0x17, 0xb3, 0xe2, 0x26, 0xc3, 0x79, 0x92, 0xf3, 0x78, 0x7c, 0x30, 0xe7, 0x1b, 0x1d, 0x8c, 0xf7, 0xf9, 0xce, 0x97, 0xde, 0xf1, 0x39, 0x2, 0x4, 0x9f, 0x8b, 0x16, 0x4c, 0x86, 0xf5, 0x24, 0xf, 0x35, 0x8e, 0xaf, 0xe0, 0xe9, 0xf3, 0x7a, 0xca, 0x86, 0xac, 0x29, 0x5c, 0x1d, 0x91, 0xd7, 0x2, 0xf1, 0x2, 0x3a, 0xae, 0x5b, 0x79, 0x12, 0xa5, 0xff, 0xd2, 0x4, 0x6a, 0x77, 0x47, 0x28, 0x42, 0xf7, 0xab, 0xc2, 0x1f, 0xe4, 0xe1, 0x69, 0x8f, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa0, 0x81, 0xb6, 0x30, 0x81, 0xb3, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0xe, 0x31, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x30, 0x30, 0x6, 0x3, 0x55, 0x1d, 0x11, 0x4, 0x29, 0x30, 0x27, 0xa0, 0xb, 0x6, 0x5, 0x60, 0x4c, 0x1, 0x3, 0x1, 0xa0, 0x2, 0x4, 0x0, 0xa0, 0xb, 0x6, 0x5, 0x60, 0x4c, 0x1, 0x3, 0x5, 0xa0, 0x2, 0x4, 0x0, 0xa0, 0xb, 0x6, 0x5, 0x60, 0x4c, 0x1, 0x3, 0x6, 0xa0, 0x2, 0x4, 0x0, 0x30, 0x34, 0x6, 0x3, 0x55, 0x1d, 0x20, 0x4, 0x2d, 0x30, 0x2b, 0x30, 0x29, 0x6, 0x3, 0x2b, 0x5, 0x8, 0x30, 0x22, 0x30, 0x20, 0x6, 0x8, 0x2b, 0x6, 0x1, 0x5, 0x5, 0x7, 0x2, 0x1, 0x16, 0x14, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x79, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x30, 0x38, 0x6, 0x8, 0x2b, 0x6, 0x1, 0x5, 0x5, 0x7, 0x1, 0x1, 0x4, 0x2c, 0x30, 0x2a, 0x30, 0x28, 0x6, 0x8, 0x2b, 0x6, 0x1, 0x5, 0x5, 0x7, 0x30, 0x2, 0x86, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x61, 0x63, 0x2f, 0x65, 0x6e, 0x64, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x3c, 0x94, 0xa5, 0xc, 0x1c, 0x92, 0x82, 0x38, 0x35, 0x5e, 0xa0, 0x59, 0x20, 0x0, 0x23, 0xe3, 0xb8, 0xb8, 0xdb, 0xa6, 0x28, 0x73, 0xc9, 0xe4, 0x25, 0xb7, 0x3f, 0xe1, 0x33, 0x8e, 0x6c, 0x96, 0xbd, 0xf0, 0x88, 0x8, 0xa3, 0x78, 0x4b, 0x2e, 0xf, 0x6a, 0x7d, 0x89, 0x46, 0x2d, 0x43, 0xe9, 0x6a, 0x65, 0x43, 0x91, 0x8c, 0x63, 0x76, 0x1, 0x41, 0x79, 0x96, 0x7e, 0x84, 0xe9, 0x43, 0x43, 0x2d, 0xe, 0xc, 0x96, 0xf9, 0x77, 0x27, 0x6c, 0xb5, 0x76, 0x12, 0x7d, 0x49, 0x49, 0xf9, 0x4b, 0x40, 0x99, 0x6, 0x7, 0x38, 0x39, 0x9e, 0x71, 0x5d, 0xb4, 0xeb, 0x23, 0x7f, 0x79, 0xe3, 0xec, 0xb0, 0xc, 0xd6, 0x34, 0xf0, 0x23, 0xf2, 0x9a, 0xd1, 0x75, 0xfd, 0x32, 0x58, 0x67, 0x5b, 0xa2, 0x64, 0xf4, 0x96, 0x1e, 0x82, 0xc5, 0x87, 0xde, 0xfa, 0x90, 0x5d, 0x16, 0x9e, 0x3e, 0xf, 0x37, 0x25, 0x90, 0x89, 0x34, 0xe7, 0xd9, 0x37, 0x46, 0x4, 0xd8, 0x86, 0x85, 0xb4, 0xcf, 0xc9, 0x63, 0xac, 0xb5, 0x94, 0x8e, 0xdc, 0xc7, 0xef, 0x5e, 0x4c, 0x50, 0xbe, 0xd1, 0xf4, 0x8e, 0x18, 0x91, 0x86, 0xef, 0xba, 0x89, 0x38, 0x32, 0x73, 0x14, 0xe3, 0x2, 0x97, 0xc9, 0x3c, 0x10, 0x7f, 0x15, 0x95, 0xf2, 0x2a, 0xc1, 0x53, 0x9c, 0x60, 0x66, 0xe4, 0x47, 0x24, 0xfc, 0x8d, 0x4e, 0x34, 0x29, 0x24, 0x44, 0x87, 0x16, 0x18, 0x7e, 0x25, 0x5f, 0xa4, 0x62, 0x7d, 0xeb, 0x37, 0xdb, 0x8c, 0xd4, 0x75, 0xd1, 0xc, 0x5, 0xdc, 0xd8, 0xac, 0x40, 0xdc, 0xad, 0xa4, 0x7a, 0x79, 0xe7, 0x77, 0xfb, 0x8a, 0x19, 0x27, 0xcb, 0x24, 0x15, 0xb8, 0x1a, 0x3c, 0x98, 0x7c, 0xe9, 0x4d, 0x72, 0x56, 0x86, 0x99, 0x58, 0x4c, 0x28, 0xf8, 0x4, 0x6a, 0xe, 0x9d, 0xb2, 0x51, 0xa3, 0xd7, 0x96, 0x25, 0x24 ];
function parseRequest() {
	let rawRequest = new Uint8Array(raw);
	let decoded = asn1js.fromBER(rawRequest.buffer);
	if (decoded.offset === (-1)) throw 'Invalid public keu info';
	let certificationRequestInfo = decoded.result.valueBlock.value[0];
	let subject = certificationRequestInfo.valueBlock.value[1];
	let CSet = subject.valueBlock.value[0];
	let CVal = CSet.valueBlock.value[0];
	let COID = CVal.valueBlock.value[0];
	let CValue = CVal.valueBlock.value[1];
	let attributes = certificationRequestInfo.valueBlock.value[3];
	console.log(COID);
	console.log(CValue);
	console.log(attributes);
}

const fs = require('fs');
let typedPubKey = new Uint8Array(rawPubKey);
let buffer = makeCertificationRequestInfo(typedPubKey);
let certificationRequestInfo = new Uint8Array(buffer);
fs.writeFileSync('./CertificationRequestInfo.der', certificationRequestInfo);
*/